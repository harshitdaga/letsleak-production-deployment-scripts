# You may add here your
# server {
#   ...
# }
# statements for each of your virtual hosts to this file

##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##



server {
    listen 80 default_server;
    listen [::]:80 default_server ipv6only=on;

    root /usr/share/nginx/html;
    index index.html index.htm;

    # Make site accessible from http://localhost/
    # the domain on which we want to host the application. Since we set "default_server" previously, nginx will answer all hosts anyway.
    server_name #HOST_IP#; 
    
    location / {
        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        #try_files $uri $uri/ =404;
        # Uncomment to enable naxsi on this location
        # include /etc/nginx/naxsi.rules
    }

    # Only for nginx-naxsi used with nginx-naxsi-ui : process denied requests
    #location /RequestDenied {
    #   proxy_pass http://127.0.0.1:8080;
    #}

    #error_page 404 /404.html;
    error_page 403 404 /404.html;
    location = /404.html {
           allow all;
    }

    # redirect server error pages to the static page /50x.html
    #
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
       root /usr/share/nginx/html;
    }

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #   fastcgi_split_path_info ^(.+\.php)(/.+)$;
    #   # NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
    #
    #   # With php5-cgi alone:
    #   fastcgi_pass 127.0.0.1:9000;
    #   # With php5-fpm:
    #   fastcgi_pass unix:/var/run/php5-fpm.sock;
    #   fastcgi_index index.php;
    #   include fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #   deny all;
    #}

    ## 
    # Block spammers and other unwanted visitors
    ## 
    include /etc/nginx/ip-list/blockips_all.conf;

    ##
    # General
    ## 
    server_tokens off;
    
    # So the original HTTP Host header is preserved
    proxy_set_header  Host  $host;
    
    # The IP address of the client (which might be a proxy itself)   
    proxy_set_header  X-Real-IP $remote_addr;

    # The IP address in the HTTP X-Forwarded-For header (which would be the 'origin' client).    
    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;    
}

# another virtual host using mix of IP-, name-, and port-based configuration
#
#server {
#   listen 8000;
#   listen somename:8080;
#   server_name somename alias another.alias;
#   root html;
#   index index.html index.htm;
#
#   location / {
#       try_files $uri $uri/ =404;
#   }
#}


# HTTPS server
#
#server {
#   listen 443;
#   server_name localhost;
#
#   root html;
#   index index.html index.htm;
#
#   ssl on;
#   ssl_certificate cert.pem;
#   ssl_certificate_key cert.key;
#
#   ssl_session_timeout 5m;
#
#   ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
#   ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
#   ssl_prefer_server_ciphers on;
#
#   location / {
#       try_files $uri $uri/ =404;
#   }
#}

################################################
# SERVER
################################################
server {
        listen 80;
        listen [::]:80;
        server_name letsleak.com www.letsleak.com;

        passenger_enabled on;

        #Specific to server
        passenger_set_cgi_param DDP_DEFAULT_CONNECTION_URL http://ddpbeta.letsleak.com;
        
        # Tell Passenger where the app is.
        passenger_app_root /home/hd/app/snaps/current;
        
        # The entry point is server.js, not app.js. Tell Passenger
        # about this.
        passenger_app_type node;
        passenger_startup_file main.js;

        # The static assets are in `static_files` instead, so tell Nginx about it.
        root /home/hd/app/snaps/current/programs/web.browser/app;

        # There is no `tmp` dir. No problem, we can tell Passenger
        # to look for restart.txt in /webapps/foo instead.
        passenger_restart_dir /home/hd/app/snaps/current/tmp;

        ## 
        # Block spammers and other unwanted visitors
        ## 
        include /etc/nginx/ip-list/blockips.conf;

        ##
        # General
        ## 
        #more_clear_headers  'Server' 'X-Powered-By' 'X-Runtime' 'Date';
        #passenger_show_version_in_header off;
        server_tokens off;

        #proxy_http_version 1.1;
        #proxy_set_header Connection "";
        #proxy_set_header Host $host;
        #proxy_set_header X-Real-IP $remote_addr;
        #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #proxy_set_header X-Forwarded-Proto $scheme;
    }


server {
        listen 80;
        listen [::]:80;
        server_name ddpbeta.letsleak.com www.ddpbeta.letsleak.com;

        passenger_enabled on;

        # Tell Passenger where the app is.
        passenger_app_root /home/hd/app/snaps/current;
        
        # The entry point is server.js, not app.js. Tell Passenger
        # about this.
        passenger_app_type node;
        passenger_startup_file main.js;

        # The static assets are in `static_files` instead, so tell Nginx about it.
        root /home/hd/app/snaps/current/programs/web.browser/app;

        # There is no `tmp` dir. No problem, we can tell Passenger
        # to look for restart.txt in /webapps/foo instead.
        passenger_restart_dir /home/hd/app/snaps/current/tmp;

        ## 
        # Block spammers and other unwanted visitors
        ## 
        include /etc/nginx/ip-list/blockips.conf;

        ##
        # General
        ## 
        #more_clear_headers  'Server' 'X-Powered-By' 'X-Runtime' 'Date';
        #passenger_show_version_in_header off;
        server_tokens off;

        #proxy_http_version 1.1;
        #proxy_set_header Connection "";
        #proxy_set_header Host $host;
        #proxy_set_header X-Real-IP $remote_addr;
        #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #proxy_set_header X-Forwarded-Proto $scheme;
    }